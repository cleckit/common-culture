trigger:
  branches:
    include:
      - main
  paths:
    include:
      - sth/robert_common/**  # Only trigger when your team's code changes

pool:
  name: 'Common-Pool'

variables:
  # Track your team's extensions/wrappers of common code
  COMMON_DIRECTORY: "sth/robert_common" # Your team's extensions to track
  TRACKING_FILE: "usage_report.md" # Markdown file for better readability

stages:
  - stage: TrackCommonReuse
    displayName: Track Common Code Usage
    jobs:
      - job: GitHubAnalysis
        displayName: GitHub-based Usage Analysis
        steps:
          # STEP 1: Checkout with full history
          - checkout: self
            fetchDepth: 0
            displayName: "Checkout Repository with Full History"

          # STEP 2: Install and setup GitHub CLI
          - script: |
              echo "Checking for GitHub CLI (gh)..."
              if command -v gh >/dev/null 2>&1; then
                echo "✅ GitHub CLI found: $(gh --version | head -1)"
              else
                echo "❌ GitHub CLI not found. Installing..."
                curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
                echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
                sudo apt update && sudo apt install gh -y
                echo "✅ GitHub CLI installed: $(gh --version | head -1)"
              fi
            displayName: "Check & Install GitHub CLI if Needed"

          # STEP 3: Authenticate with GitHub (requires GitHub PAT in Azure DevOps variables)
          - script: |
              echo "Configuring GitHub authentication..."
              
              # Check if GITHUB_TOKEN is available
              if [ -z "$(GITHUB_TOKEN)" ]; then
                echo "⚠️  GITHUB_TOKEN not configured. Some features will be limited."
                echo "Add your GitHub Personal Access Token to Azure DevOps pipeline variables."
              else
                echo "$(GITHUB_TOKEN)" | gh auth login --with-token
                gh auth status
                echo "✅ GitHub authentication successful"
              fi
            displayName: "Setup GitHub Authentication"
            env:
              GITHUB_TOKEN: $(GITHUB_TOKEN)  # Add this as a secret variable in Azure DevOps

          # STEP 4: Generate comprehensive usage report
          - script: |
              echo "Generating comprehensive usage report..."
              
              # Create report header
              echo "# 🔄 Common Code Usage Report $(date +%Y-%m-%d)" > $(TRACKING_FILE)
              echo "Generated from Azure DevOps Pipeline" >> $(TRACKING_FILE)
              echo "" >> $(TRACKING_FILE)
              
              # Basic statistics
              echo "## 📊 Basic Statistics" >> $(TRACKING_FILE)
              echo "" >> $(TRACKING_FILE)
              
              total_files=$(find $(COMMON_DIRECTORY) -name "*.py" 2>/dev/null | wc -l || echo "0")
              echo "- **Total Python files in $(COMMON_DIRECTORY):** $total_files" >> $(TRACKING_FILE)
              
              usage_count=$(grep -r "from sth.robert_common" . --include="*.py" 2>/dev/null | wc -l || echo "0")
              echo "- **Internal import statements:** $usage_count" >> $(TRACKING_FILE)
              
              recent_commits=$(git log --oneline --since="30 days ago" -- $(COMMON_DIRECTORY)/ 2>/dev/null | wc -l || echo "0")
              echo "- **Commits in last 30 days:** $recent_commits" >> $(TRACKING_FILE)
              
              echo "" >> $(TRACKING_FILE)
              
              # Recent activity
              echo "## � Recent Activity (Last 7 Days)" >> $(TRACKING_FILE)
              echo "" >> $(TRACKING_FILE)
              echo "```" >> $(TRACKING_FILE)
              git log --oneline --since="7 days ago" -- $(COMMON_DIRECTORY)/ | head -10 >> $(TRACKING_FILE) 2>/dev/null || echo "No recent changes" >> $(TRACKING_FILE)
              echo "```" >> $(TRACKING_FILE)
              echo "" >> $(TRACKING_FILE)
              
              # Most imported modules
              echo "## 🏆 Most Used Modules" >> $(TRACKING_FILE)
              echo "" >> $(TRACKING_FILE)
              echo "```" >> $(TRACKING_FILE)
              grep -r "from sth.robert_common" . --include="*.py" 2>/dev/null | \
                cut -d':' -f2 | cut -d' ' -f2 | sort | uniq -c | sort -nr | head -5 >> $(TRACKING_FILE) || echo "No usage found" >> $(TRACKING_FILE)
              echo "```" >> $(TRACKING_FILE)
              echo "" >> $(TRACKING_FILE)
              
              # File-by-file usage
              echo "## 📂 Detailed Usage by File" >> $(TRACKING_FILE)
              echo "" >> $(TRACKING_FILE)
              grep -r "from sth.robert_common" . --include="*.py" 2>/dev/null | while IFS=':' read -r file import_line; do
                echo "- **$file**: \`$import_line\`" >> $(TRACKING_FILE)
              done || echo "No detailed usage found" >> $(TRACKING_FILE)
              
              echo "" >> $(TRACKING_FILE)
              echo "---" >> $(TRACKING_FILE)
              echo "*Report generated on $(date) by Azure DevOps Pipeline*" >> $(TRACKING_FILE)
              
              echo "✅ Usage report generated successfully"
              
            displayName: "Generate Usage Report"

          # STEP 5: GitHub Integration (if authenticated)
          - script: |
              echo "Attempting GitHub integration..."
              
              # Try to get repository info
              if gh auth status >/dev/null 2>&1; then
                echo "🔍 Searching GitHub for cross-repository usage..."
                
                # Try to search for usage across GitHub
                echo "" >> $(TRACKING_FILE)
                echo "## � Cross-Repository Usage (GitHub Search)" >> $(TRACKING_FILE)
                echo "" >> $(TRACKING_FILE)
                
                # Search for usage in GitHub (requires authentication and org access)
                gh search code "sth.robert_common language:python" --json repository,path --limit 10 2>/dev/null | \
                  jq -r '.[] | "- [\(.path)](\(.repository.html_url)/blob/main/\(.path)) in \(.repository.full_name)"' >> $(TRACKING_FILE) || \
                  echo "- No cross-repository usage found (requires org-level access)" >> $(TRACKING_FILE)
                
                echo "✅ GitHub integration completed"
              else
                echo "⚠️  GitHub not authenticated - skipping cross-repo analysis"
                echo "" >> $(TRACKING_FILE)
                echo "## 🌐 Cross-Repository Usage" >> $(TRACKING_FILE)
                echo "*GitHub authentication required for cross-repository analysis*" >> $(TRACKING_FILE)
              fi
            displayName: "GitHub Cross-Repository Analysis"
            env:
              GITHUB_TOKEN: $(GITHUB_TOKEN)
            condition: succeededOrFailed()

          # STEP 6: Publish report as artifact
          - task: PublishBuildArtifacts@1
            inputs:
              pathToPublish: '$(TRACKING_FILE)'
              artifactName: 'common-code-usage-report'
              publishLocation: 'Container'
            displayName: "Publish Usage Report Artifact"

          # STEP 7: Display summary in pipeline logs
          - script: |
              echo "📋 USAGE TRACKING SUMMARY"
              echo "========================="
              echo ""
              cat $(TRACKING_FILE)
              echo ""
              echo "📄 Full report published as pipeline artifact: 'common-code-usage-report'"
              echo "🔗 Download the report from the pipeline run artifacts section"
            displayName: "Display Report Summary"